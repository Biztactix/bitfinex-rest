using System;
using System.Collections.Generic;
using Bitfinex.JsonConverters;
using Bitfinex.Models;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Newtonsoft.Json;

namespace Bitfinex.Tests.Models
{
    [TestClass]
    public class BooksTests
    {
        [TestMethod]
        public void BooksDeserializeTest1()
        {
            //GET: https://api.bitfinex.com/v2/book/fUSD/P0?len=5
            string json = "[ [ 8819908, 1499993669662, -42.48113687, 0.00026573, 2 ], [ 8819907, 1499993669637, -93.08533495, 0.00026571, 2 ], [ 8819906, 1499993669606, -80.23924126, 0.0002657, 2 ], [ 8819905, 1499993669580, -80.23924126, 0.0002657, 2 ], [ 8819904, 1499993669555, -90.44483913, 0.0002657, 2 ], [ 8819903, 1499993669508, -53.77420134, 0.0002657, 2 ], [ 8819902, 1499993669472, -53.77420134, 0.0002657, 2 ], [ 8819901, 1499993669408, -53.77420134, 0.0002657, 2 ], [ 8819900, 1499993669374, -2.6136619, 0.0002657, 2 ], [ 8819895, 1499993667107, -51.16053944, 0.0002657, 2 ], [ 8819894, 1499993667086, -53.77420134, 0.0002657, 2 ], [ 8819893, 1499993667057, -53.77420134, 0.0002657, 2 ], [ 8819892, 1499993667031, -2474.20793604, 0.0002657, 2 ], [ 8819891, 1499993667006, -53.77420134, 0.00026563, 2 ], [ 8819890, 1499993666980, -53.77420134, 0.00026563, 2 ], [ 8819889, 1499993666960, -53.77420134, 0.00026563, 2 ], [ 8819888, 1499993666933, -53.77420134, 0.00026563, 2 ], [ 8819887, 1499993666907, -53.77420134, 0.00026563, 2 ], [ 8819886, 1499993666887, -53.77420134, 0.00026563, 2 ], [ 8819885, 1499993666863, -53.77420134, 0.00026563, 2 ], [ 8819884, 1499993666843, -646.52363859, 0.00026563, 2 ], [ 8819883, 1499993666818, -4948.41587208, 0.00026563, 2 ], [ 8819882, 1499993666767, -87.03953651, 0.00026563, 2 ], [ 8819881, 1499993666727, -80.23924126, 0.00026562, 2 ], [ 8819880, 1499993666691, -80.23924126, 0.00026562, 2 ], [ 8819879, 1499993666658, -90.44483913, 0.00026562, 2 ], [ 8819878, 1499993666630, -53.77420134, 0.0002656, 2 ], [ 8819877, 1499993666605, -53.77420134, 0.0002656, 2 ], [ 8819876, 1499993666573, -80.23924126, 0.00026494, 2 ], [ 8819875, 1499993666536, -80.23924126, 0.00026494, 2 ], [ 8819874, 1499993666505, -4083.5268, 0.00026494, 2 ], [ 8819873, 1499993666478, -50, 0.0002649, 2 ], [ 8819872, 1499993666447, -1768.6234, 0.0002648, 2 ], [ 8819871, 1499993666416, -98.37, 0.0002648, 3 ], [ 8819870, 1499993666371, -169.69, 0.0002648, 3 ], [ 8819869, 1499993666311, -80.23924126, 0.0002647, 2 ], [ 8819868, 1499993666288, -90.44483913, 0.0002647, 2 ], [ 8819867, 1499993666256, -2474.20793604, 0.0002647, 2 ], [ 8819866, 1499993666222, -5081.18275562, 0.00026468, 2 ], [ 8819865, 1499993666200, -11078.18090284, 0.00026468, 2 ], [ 8819864, 1499993666152, -900.84877392, 0.00026368, 2 ], [ 8819839, 1499993661552, -24.08470096, 0.00026368, 2 ], [ 8819838, 1499993661481, -73.62422513, 0.00026368, 2 ], [ 8819832, 1499993655549, -20561.66978856, 0.00026468, 2 ], [ 8819831, 1499993654708, -14.1942157, 0.00026468, 2 ], [ 8819829, 1499993654659, -2.45249997, 0.00022719, 2 ], [ 8819827, 1499993653789, -47.54750003, 0.00022719, 2 ], [ 8819826, 1499993653730, -0.215336, 0.00026468, 2 ], [ 8819825, 1499993653665, -6163.58260527, 0.00026468, 2 ], [ 8819824, 1499993653601, -1962.84, 0.00026467, 2 ], [ 8819823, 1499993653567, -1326.7468018, 0.00026465, 2 ], [ 8819822, 1499993653459, -56.90229132, 0.00026387, 2 ], [ 8819821, 1499993653411, -237.783, 0.00026387, 2 ], [ 8819820, 1499993653372, -111.95655804, 0.00026368, 2 ], [ 8819819, 1499993653337, -80.23924126, 0.0002617, 2 ], [ 8819818, 1499993653277, -596.14230575, 0.0002617, 2 ], [ 8819817, 1499993653250, -80.23924126, 0.00023966, 2 ], [ 8819815, 1499993653196, -80.23924126, 0.00023966, 2 ], [ 8819814, 1499993653159, -80.23924126, 0.00023966, 2 ], [ 8819813, 1499993653100, -80.23924126, 0.00023966, 2 ], [ 8819812, 1499993653074, -80.23924126, 0.00023966, 2 ], [ 8819811, 1499993652976, -80.23924126, 0.00023966, 2 ], [ 8819810, 1499993652937, -451, 0.000236, 2 ], [ 8819809, 1499993652914, -56.90229132, 0.0002296, 2 ], [ 8819808, 1499993652888, -56.24275274, 0.0002296, 2 ], [ 8819807, 1499993652857, -56.24275274, 0.0002296, 2 ], [ 8819806, 1499993652812, -90.44483913, 0.00022749, 2 ], [ 8819805, 1499993652734, -1882.80746053, 0.00022749, 2 ], [ 8819804, 1499993652652, -85.14923868, 0.0002274, 2 ], [ 8819803, 1499993652628, -1408.82154882, 0.0002273, 2 ], [ 8819802, 1499993652569, -1408.82154882, 0.0002273, 2 ], [ 8819801, 1499993652510, -599.4112884, 0.0002273, 2 ], [ 8819799, 1499993652458, -599.4112884, 0.0002273, 2 ], [ 8819798, 1499993652356, -90.44483913, 0.0002273, 2 ], [ 8819797, 1499993652294, -4287.06443826, 0.0002273, 2 ], [ 8819796, 1499993651901, -779.58632982, 0.0002273, 2 ], [ 8819775, 1499993648738, -86.4999999, 0.0002273, 2 ], [ 8819773, 1499993647636, -215.50975942, 0.0002273, 2 ], [ 8819772, 1499993646194, -29.67599058, 0.0002273, 2 ], [ 8819765, 1499993643036, -54.1290761, 0.0002273, 2 ], [ 8819759, 1499993639396, -1.66913336, 0.0002273, 2 ], [ 8819756, 1499993638220, -179.39355176, 0.0002273, 2 ], [ 8819755, 1499993638152, -50, 0.0002273, 2 ], [ 8819754, 1499993638118, -50, 0.0002273, 2 ], [ 8819753, 1499993638081, -68.79399651, 0.0002273, 2 ], [ 8819752, 1499993635466, -190.02840302, 0.0002273, 2 ], [ 8819751, 1499993633585, -0.19886031, 0.0002273, 2 ], [ 8819750, 1499993632156, -44.3313754, 0.0002273, 2 ], [ 8819748, 1499993628217, -15.38736476, 0.0002273, 2 ], [ 8819747, 1499993628140, -65.45692284, 0.0002271, 2 ], [ 8819746, 1499993628040, -57.25490182, 0.0002271, 2 ], [ 8819745, 1499993625767, -25.019, 0.0002271, 2 ], [ 8819744, 1499993624420, -4.75883443, 0.0002271, 2 ], [ 8819743, 1499993622485, -753.56998339, 0.0002271, 2 ], [ 8819742, 1499993621593, -568.21882918, 0.0002271, 2 ], [ 8819741, 1499993621541, -599.4112884, 0.0002271, 2 ], [ 8819740, 1499993621484, -110.97509029, 0.0002271, 2 ], [ 8819739, 1499993621416, -50, 0.00022492, 2 ], [ 8819738, 1499993621357, -50, 0.00022481, 2 ], [ 8819737, 1499993621272, -602.16479213, 0.00022465, 2 ], [ 8819736, 1499993621192, -5.3639181, 0.00022465, 2 ], [ 8819732, 1499993584813, -50, 0.00022465, 2 ], [ 8819731, 1499993353283, -19, 0.0002659, 2 ], [ 8819729, 1499993352687, -967.61447872, 0.0002659, 2 ], [ 8819727, 1499993352105, -1167.98962257, 0.0002659, 2 ], [ 8819725, 1499993351249, -16023.36348933, 0.0002659, 2 ], [ 8819724, 1499993351230, -2098.64941318, 0.0002659, 2 ], [ 8819719, 1499993347667, -71.1836148, 0.0002659, 2 ], [ 8819718, 1499993347647, -135.7293452, 0.0002658, 2 ], [ 8819717, 1499993347624, -509.22367437, 0.0002658, 2 ], [ 8819712, 1499993346579, -52.37534993, 0.0002658, 2 ], [ 8819708, 1499993343496, -0.65331699, 0.0002658, 2 ], [ 8819707, 1499993343468, -2530.78440774, 0.0002658, 2 ], [ 8819706, 1499993343446, -1263.84, 0.0002658, 2 ], [ 8819705, 1499993343424, -120.35886189, 0.000265, 2 ], [ 8819704, 1499993343403, -120.35886189, 0.000265, 2 ], [ 8819703, 1499993343380, -120.35886189, 0.000265, 2 ], [ 8819702, 1499993343358, -147.42764988, 0.000265, 2 ], [ 8819701, 1499993342997, -1.30474549, 0.000265, 2 ], [ 8819697, 1499993341704, -7127.22537711, 0.000265, 2 ]]";

            // TO-DO: Broken endpoint?

        }

        [TestMethod]
        public void BooksDeserializeTest2()
        {
            //GET: https://api.bitfinex.com/v2/book/tBTCUSD/P0?len=5
            string json = "[ [ 2317.9,2,3.54219284 ],[ 2317.1,1,0.9589 ],[ 2317,1,2.965041 ],[ 2315.2,1,7.64043703 ],[ 2315,2,24.62799232 ],[ 2318,4,-4.18890282 ],[ 2318.6,1,-1.8 ],[ 2318.9,1,-1.0761 ],[ 2319,2,-14 ],[ 2319.4,1,-2.79672805 ] ]";

            var books = JsonConvert.DeserializeObject<List<IBook>>(json, new BooksResultConverter());

            Assert.AreEqual(10, books.Count);

            var book = books[0];

            Assert.AreEqual(3.54219284, book.Amount);
            Assert.AreEqual(2, book.Count);
            Assert.AreEqual(2317.9, book.Price);
        }

        [TestMethod]
        public void BooksClientTest()
        {
            var client = new BitfinexRestClient();
            var books = client.GetBooks("tBTCUSD", Precision.P0, 5);

            Assert.AreEqual(10, books.Count);
        }

        [TestMethod]
        public void BooksClientWrongSymbolTest()
        {
            try
            {
                var client = new BitfinexRestClient();
                client.GetBooks("fUSD", Precision.P0, 5);
            }
            catch (Exception ex)
            {
                if (ex.InnerException != null) Assert.AreEqual(ex.InnerException.Message, "(10020) symbol: invalid");
            }
        }

        [TestMethod]
        public void BooksClientIncorrectEndpointTest()
        {
            try
            {
                var client = new BitfinexRestClient { BaseUrl = "https://api.bitfinexf.com/v2" };

                client.GetBooks("fUSD", Precision.P0, 5);
            }
            catch (Exception ex)
            {
                if (ex.InnerException != null)
                    Assert.AreEqual(ex.InnerException.Message,
                        "The remote name could not be resolved: 'api.bitfinexf.com'");
            }
        }
    }
}
